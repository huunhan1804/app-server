package com.example.shoppingsystem.utils;

import com.example.shoppingsystem.entities.*;
import com.example.shoppingsystem.enums.*;
import com.example.shoppingsystem.repositories.*;
import com.github.javafaker.Faker;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

@Component
@RequiredArgsConstructor
public class SampleDataGenerator {

    private final AccountRepository accountRepository;
    private final AccessTokenRepository accessTokenRepository;
    private final RefreshTokenRepository refreshTokenRepository;

    private final RoleRepository roleRepository;
    private final ApprovalStatusRepository approvalStatusRepository;
    private final ParentCategoryRepository parentCategoryRepository;
    private final CategoryRepository categoryRepository;
    private final ProductRepository productRepository;
    private final ProductVariantRepository productVariantRepository;
    private final MultimediaRepository multimediaRepository;
    private final CartRepository cartRepository;
    private final CartItemRepository cartItemRepository;
    private final OrderRepository orderRepository;
    private final OrderDetailRepository orderDetailRepository;
    private final CouponRepository couponRepository;
    private final AccountCouponRepository accountCouponRepository;
    private final CouponOrderListRepository couponOrderListRepository;
    private final FeedbackRepository feedbackRepository;
    private final AddressRepository addressRepository;
    private final AgencyInfoRepository agencyInfoRepository;
    private final MembershipRepository membershipRepository;
    private final PasswordEncoder passwordEncoder;

    private final Faker faker = new Faker(new Locale("vi"));
    private final Random random = new Random();

    @Transactional
    public void generateSampleData() {
        System.out.println("=== B·∫ÆT ƒê·∫¶U T·∫†O D·ªÆ LI·ªÜU M·∫™U ===");

        try {
            // X√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc (n·∫øu c√≥)
            clearExistingData();

            // 1. T·∫°o Roles
            List<Role> roles = createRoles();
            System.out.println("‚úì ƒê√£ t·∫°o " + roles.size() + " roles");

            // 2. T·∫°o Approval Status
            List<ApprovalStatus> approvalStatuses = createApprovalStatuses();
            System.out.println("‚úì ƒê√£ t·∫°o " + approvalStatuses.size() + " approval statuses");

            // 3. T·∫°o Parent Categories
            List<ParentCategory> parentCategories = createParentCategories();
            System.out.println("‚úì ƒê√£ t·∫°o " + parentCategories.size() + " parent categories");

            // 4. T·∫°o Categories
            List<Category> categories = createCategories(parentCategories);
            System.out.println("‚úì ƒê√£ t·∫°o " + categories.size() + " categories");

            // 5. T·∫°o Accounts
            List<Account> accounts = createAccounts(roles, approvalStatuses);
            System.out.println("‚úì ƒê√£ t·∫°o " + accounts.size() + " accounts");

            // 6. T·∫°o Memberships
            List<Membership> memberships = createMemberships(accounts);
            System.out.println("‚úì ƒê√£ t·∫°o " + memberships.size() + " memberships");

            // 7. T·∫°o Agency Info
            List<AgencyInfo> agencyInfos = createAgencyInfos(accounts, approvalStatuses);
            System.out.println("‚úì ƒê√£ t·∫°o " + agencyInfos.size() + " agency infos");

            // 8. T·∫°o Addresses
            List<Address> addresses = createAddresses(accounts);
            System.out.println("‚úì ƒê√£ t·∫°o " + addresses.size() + " addresses");

            // 9. T·∫°o Products
            List<Product> products = createProducts(categories, agencyInfos, approvalStatuses);
            System.out.println("‚úì ƒê√£ t·∫°o " + products.size() + " products");

            // 10. T·∫°o Product Variants
            List<ProductVariant> productVariants = createProductVariants(products);
            System.out.println("‚úì ƒê√£ t·∫°o " + productVariants.size() + " product variants");

            // 11. T·∫°o Multimedia
            List<Multimedia> multimedias = createMultimedia(accounts, products, productVariants, categories);
            System.out.println("‚úì ƒê√£ t·∫°o " + multimedias.size() + " multimedia");

            // 12. T·∫°o Carts
            List<Cart> carts = createCarts(accounts);
            System.out.println("‚úì ƒê√£ t·∫°o " + carts.size() + " carts");

            // 13. T·∫°o Cart Items
            List<CartItem> cartItems = createCartItems(carts, products, productVariants);
            System.out.println("‚úì ƒê√£ t·∫°o " + cartItems.size() + " cart items");

            // 14. T·∫°o Coupons
            List<Coupon> coupons = createCoupons(categories);
            System.out.println("‚úì ƒê√£ t·∫°o " + coupons.size() + " coupons");

            // 15. T·∫°o Account Coupons
            List<AccountCoupon> accountCoupons = createAccountCoupons(accounts, coupons);
            System.out.println("‚úì ƒê√£ t·∫°o " + accountCoupons.size() + " account coupons");

            // 16. T·∫°o Orders
            List<OrderList> orders = createOrders(accounts, agencyInfos);
            System.out.println("‚úì ƒê√£ t·∫°o " + orders.size() + " orders");

            // 17. T·∫°o Order Details
            List<OrderDetail> orderDetails = createOrderDetails(orders, products, productVariants);
            System.out.println("‚úì ƒê√£ t·∫°o " + orderDetails.size() + " order details");

            // 18. T·∫°o Coupon Order List
            List<CouponOrderList> couponOrderLists = createCouponOrderLists(coupons, orders);
            System.out.println("‚úì ƒê√£ t·∫°o " + couponOrderLists.size() + " coupon order lists");

            // 19. T·∫°o Feedbacks
            List<Feedback> feedbacks = createFeedbacks(accounts, products);
            System.out.println("‚úì ƒê√£ t·∫°o " + feedbacks.size() + " feedbacks");

            // T√≠nh t·ªïng
            long total = roleRepository.count() + approvalStatusRepository.count() +
                    parentCategoryRepository.count() + categoryRepository.count() +
                    accountRepository.count() + membershipRepository.count() +
                    agencyInfoRepository.count() + addressRepository.count() +
                    productRepository.count() + productVariantRepository.count() +
                    multimediaRepository.count() + cartRepository.count() +
                    cartItemRepository.count() + couponRepository.count() +
                    accountCouponRepository.count() + orderRepository.count() +
                    orderDetailRepository.count() + couponOrderListRepository.count() +
                    feedbackRepository.count();

            System.out.println("=== HO√ÄN TH√ÄNH T·∫†O D·ªÆ LI·ªÜU M·∫™U ===");
            System.out.println("T·ªîNG S·ªê RECORDS: " + total);

        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI KHI T·∫†O D·ªÆ LI·ªÜU: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("L·ªói t·∫°o d·ªØ li·ªáu m·∫´u", e);
        }
    }

    private void clearExistingData() {
        try {
            System.out.println("üóëÔ∏è  X√≥a d·ªØ li·ªáu c≈©...");

            // X√≥a theo th·ª© t·ª± ƒê√öNG ƒë·ªÉ tr√°nh foreign key constraint
            feedbackRepository.deleteAllInBatch();
            couponOrderListRepository.deleteAllInBatch();
            orderDetailRepository.deleteAllInBatch();
            orderRepository.deleteAllInBatch();
            accountCouponRepository.deleteAllInBatch();
            couponRepository.deleteAllInBatch();
            cartItemRepository.deleteAllInBatch();
            cartRepository.deleteAllInBatch();
            multimediaRepository.deleteAllInBatch();
            productVariantRepository.deleteAllInBatch();
            productRepository.deleteAllInBatch();
            addressRepository.deleteAllInBatch();

            // QUAN TR·ªåNG: X√≥a agency_info TR∆Ø·ªöC account
            agencyInfoRepository.deleteAllInBatch();
            membershipRepository.deleteAllInBatch();

            accessTokenRepository.deleteAllInBatch();
            refreshTokenRepository.deleteAllInBatch();
            accountRepository.deleteAllInBatch();  // X√≥a account SAU agency_info

            categoryRepository.deleteAllInBatch();
            parentCategoryRepository.deleteAllInBatch();
            approvalStatusRepository.deleteAllInBatch();
            roleRepository.deleteAllInBatch();


            System.out.println("‚úì ƒê√£ x√≥a d·ªØ li·ªáu c≈©");

        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è  L·ªói khi x√≥a d·ªØ li·ªáu: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private List<Role> createRoles() {
        System.out.println("T·∫°o roles...");

        // Ki·ªÉm tra xem ƒë√£ c√≥ ADMIN role ch∆∞a
        Optional<Role> adminRole = Optional.ofNullable(roleRepository.findByRoleCode("ADMIN"));
        if (adminRole.isPresent()) {
            System.out.println("Roles ƒë√£ t·ªìn t·∫°i, l·∫•y t·ª´ database");
            return roleRepository.findAll();
        }

        List<Role> roles = Arrays.asList(
                Role.builder()
                        .roleCode("admin")
                        .roleName("Administrator")
                        .description("System Administrator")
                        .build(),
                Role.builder()
                        .roleCode("customer")
                        .roleName("customer")
                        .description("Regular Customer")
                        .build(),
                Role.builder()
                        .roleCode("agency")
                        .roleName("agency")
                        .description("Product Agency/Seller")
                        .build(),
                Role.builder()
                        .roleCode("MODERATOR")
                        .roleName("Moderator")
                        .description("Content Moderator")
                        .build(),
                Role.builder()
                        .roleCode("SUPPORT")
                        .roleName("Support")
                        .description("Customer Support")
                        .build()
        );

        List<Role> savedRoles = roleRepository.saveAll(roles);
        System.out.println("Saved " + savedRoles.size() + " roles");
        return savedRoles;
    }

    private List<ApprovalStatus> createApprovalStatuses() {
        List<ApprovalStatus> statuses = Arrays.asList(
                ApprovalStatus.builder()
                        .statusCode("PENDING")
                        .statusName("ƒêang ch·ªù duy·ªát")
                        .build(),
                ApprovalStatus.builder()
                        .statusCode("APPROVED")
                        .statusName("ƒê√£ duy·ªát")
                        .build(),
                ApprovalStatus.builder()
                        .statusCode("REJECTED")
                        .statusName("T·ª´ ch·ªëi")
                        .build(),
                ApprovalStatus.builder()
                        .statusCode("SUSPENDED")
                        .statusName("T·∫°m ng∆∞ng")
                        .build(),
                ApprovalStatus.builder()
                        .statusCode("UNDER_REVIEW")
                        .statusName("ƒêang xem x√©t")
                        .build()
        );
        return approvalStatusRepository.saveAll(statuses);
    }

    private List<ParentCategory> createParentCategories() {
        List<ParentCategory> parentCategories = new ArrayList<>();

        // Ch·ªâ t·∫°o 1 parent category v·ªÅ Th·ª±c ph·∫©m ch·ª©c nƒÉng
        parentCategories.add(ParentCategory.builder()
                .parentCategoryName("Th·ª±c ph·∫©m ch·ª©c nƒÉng")
                .parentCategoryDescription("C√°c s·∫£n ph·∫©m th·ª±c ph·∫©m b·ªï sung dinh d∆∞·ª°ng, h·ªó tr·ª£ s·ª©c kh·ªèe v√† ph√≤ng ng·ª´a b·ªánh t·∫≠t")
                .build());

        return parentCategoryRepository.saveAll(parentCategories);
    }
    private List<Category> createCategories(List<ParentCategory> parentCategories) {
        List<Category> categories = new ArrayList<>();
        ParentCategory thucPhamChucNang = parentCategories.get(0); // Ch·ªâ c√≥ 1 parent category

        // C√°c danh m·ª•c con c·ªßa Th·ª±c ph·∫©m ch·ª©c nƒÉng
        String[] categoryNames = {
                "Th·ª±c ph·∫©m ch·ª©c nƒÉng cho m·∫Øt",
                "Th·ª±c ph·∫©m ch·ª©c nƒÉng cho gan",
                "Th·ª±c ph·∫©m ch·ª©c nƒÉng cho tim m·∫°ch",
                "Th·ª±c ph·∫©m ch·ª©c nƒÉng cho x∆∞∆°ng kh·ªõp",
                "Th·ª±c ph·∫©m ch·ª©c nƒÉng cho n√£o b·ªô",
                "Th·ª±c ph·∫©m ch·ª©c nƒÉng cho h·ªá ti√™u h√≥a",
                "Th·ª±c ph·∫©m ch·ª©c nƒÉng cho h·ªá mi·ªÖn d·ªãch",
                "Th·ª±c ph·∫©m ch·ª©c nƒÉng cho ph·ª• n·ªØ",
                "Th·ª±c ph·∫©m ch·ª©c nƒÉng cho nam gi·ªõi",
                "Th·ª±c ph·∫©m ch·ª©c nƒÉng cho ng∆∞·ªùi cao tu·ªïi",
                "Th·ª±c ph·∫©m ch·ª©c nƒÉng cho tr·∫ª em",
                "Vitamin v√† kho√°ng ch·∫•t",
                "Th·ª±c ph·∫©m ch·ª©c nƒÉng gi·∫£m c√¢n",
                "Th·ª±c ph·∫©m ch·ª©c nƒÉng tƒÉng c∆∞·ªùng th·ªÉ l·ª±c",
                "Th·ª±c ph·∫©m ch·ª©c nƒÉng cho da t√≥c",
                "Th·ª±c ph·∫©m ch·ª©c nƒÉng cho ƒë∆∞·ªùng huy·∫øt",
                "Th·ª±c ph·∫©m ch·ª©c nƒÉng cho huy·∫øt √°p",
                "Th·ª±c ph·∫©m ch·ª©c nƒÉng cho cholesterol",
                "Probiotics - Men vi sinh",
                "Omega 3 v√† d·∫ßu c√°",
                "Collagen v√† ch·ªëng l√£o h√≥a",
                "Th·ª±c ph·∫©m ch·ª©c nƒÉng cho gi·∫•c ng·ªß",
                "Th·ª±c ph·∫©m ch·ª©c nƒÉng gi·∫£i ƒë·ªôc gan",
                "Th·ª±c ph·∫©m ch·ª©c nƒÉng h·ªó tr·ª£ ung th∆∞"
        };

        String[] categoryDescriptions = {
                "H·ªó tr·ª£ c·∫£i thi·ªán th·ªã l·ª±c, b·∫£o v·ªá m·∫Øt kh·ªèi √°nh s√°ng xanh, gi·∫£m m·ªèi m·∫Øt",
                "H·ªó tr·ª£ b·∫£o v·ªá gan, gi·∫£i ƒë·ªôc gan, c·∫£i thi·ªán ch·ª©c nƒÉng gan",
                "H·ªó tr·ª£ tim m·∫°ch kh·ªèe m·∫°nh, c·∫£i thi·ªán tu·∫ßn ho√†n m√°u, ·ªïn ƒë·ªãnh nh·ªãp tim",
                "H·ªó tr·ª£ x∆∞∆°ng ch·∫Øc kh·ªèe, gi·∫£m ƒëau nh·ª©c kh·ªõp, tƒÉng c∆∞·ªùng ƒë·ªô d·∫ªo dai",
                "H·ªó tr·ª£ tƒÉng c∆∞·ªùng tr√≠ nh·ªõ, c·∫£i thi·ªán t·∫≠p trung, b·∫£o v·ªá t·∫ø b√†o n√£o",
                "H·ªó tr·ª£ ti√™u h√≥a t·ªët, c·∫£i thi·ªán h·∫•p thu dinh d∆∞·ª°ng, gi·∫£m ƒë·∫ßy h∆°i",
                "TƒÉng c∆∞·ªùng h·ªá mi·ªÖn d·ªãch, ch·ªëng oxy h√≥a, ph√≤ng ng·ª´a b·ªánh t·∫≠t",
                "H·ªó tr·ª£ s·ª©c kh·ªèe ph·ª• n·ªØ, c√¢n b·∫±ng n·ªôi ti·∫øt t·ªë, l√†m ƒë·∫πp da",
                "H·ªó tr·ª£ s·ª©c kh·ªèe nam gi·ªõi, tƒÉng c∆∞·ªùng sinh l·ª±c, c·∫£i thi·ªán th·ªÉ l·ª±c",
                "ChƒÉm s√≥c s·ª©c kh·ªèe ng∆∞·ªùi cao tu·ªïi, b·ªï sung dinh d∆∞·ª°ng thi·∫øt y·∫øu",
                "H·ªó tr·ª£ ph√°t tri·ªÉn tr√≠ n√£o, tƒÉng c∆∞·ªùng s·ª©c ƒë·ªÅ kh√°ng cho tr·∫ª em",
                "B·ªï sung vitamin v√† kho√°ng ch·∫•t thi·∫øt y·∫øu cho c∆° th·ªÉ",
                "H·ªó tr·ª£ gi·∫£m c√¢n an to√†n, ƒë·ªët ch√°y m·ª° th·ª´a, ki·ªÉm so√°t c√¢n n·∫∑ng",
                "TƒÉng c∆∞·ªùng th·ªÉ l·ª±c, s·ª©c b·ªÅn, h·ªó tr·ª£ ng∆∞·ªùi t·∫≠p th·ªÉ thao",
                "L√†m ƒë·∫πp da, ch·ªëng l√£o h√≥a, nu√¥i d∆∞·ª°ng t√≥c ch·∫Øc kh·ªèe",
                "H·ªó tr·ª£ ·ªïn ƒë·ªãnh ƒë∆∞·ªùng huy·∫øt, ph√≤ng ng·ª´a ti·ªÉu ƒë∆∞·ªùng",
                "H·ªó tr·ª£ ·ªïn ƒë·ªãnh huy·∫øt √°p, c·∫£i thi·ªán l∆∞u th√¥ng m√°u",
                "H·ªó tr·ª£ gi·∫£m cholesterol x·∫•u, b·∫£o v·ªá tim m·∫°ch",
                "C√¢n b·∫±ng h·ªá vi sinh ƒë∆∞·ªùng ru·ªôt, tƒÉng c∆∞·ªùng ti√™u h√≥a",
                "B·ªï sung Omega 3, DHA, EPA t·ª´ d·∫ßu c√° t·ª± nhi√™n",
                "Ch·ªëng l√£o h√≥a, tƒÉng ƒë·ªô ƒë√†n h·ªìi da, b·ªï sung collagen",
                "H·ªó tr·ª£ gi·∫•c ng·ªß ngon, gi·∫£m stress, th∆∞ gi√£n tinh th·∫ßn",
                "Gi·∫£i ƒë·ªôc gan t·ª± nhi√™n, thanh l·ªçc c∆° th·ªÉ, b·∫£o v·ªá t·∫ø b√†o gan",
                "H·ªó tr·ª£ ƒëi·ªÅu tr·ªã ung th∆∞, tƒÉng c∆∞·ªùng s·ª©c ƒë·ªÅ kh√°ng"
        };

        for (int i = 0; i < categoryNames.length; i++) {
            categories.add(Category.builder()
                    .parentCategory(thucPhamChucNang)
                    .categoryName(categoryNames[i])
                    .categoryDescription(categoryDescriptions[i])
                    .build());
        }

        return categoryRepository.saveAll(categories);
    }

    private List<Account> createAccounts(List<Role> roles, List<ApprovalStatus> approvalStatuses) {
        List<Account> accounts = new ArrayList<>();

        // L·∫•y roles
        Role adminRole = roles.stream().filter(r -> r.getRoleCode().equals("ADMIN")).findFirst().orElse(roles.get(0));
        Role customerRole = roles.stream().filter(r -> r.getRoleCode().equals("customer")).findFirst().orElse(roles.get(1));
        Role agencyRole = roles.stream().filter(r -> r.getRoleCode().equals("agency")).findFirst().orElse(roles.get(2));

        // Admin accounts (10)
        for (int i = 0; i < 10; i++) {
            accounts.add(createAccount(adminRole, approvalStatuses, i, "admin"));
        }

        // Customer accounts (700)
        for (int i = 0; i < 700; i++) {
            accounts.add(createAccount(customerRole, approvalStatuses, i + 10, "customer"));
        }

        // Agency accounts (250)
        for (int i = 0; i < 250; i++) {
            accounts.add(createAccount(agencyRole, approvalStatuses, i + 710, "agency"));
        }

        return accountRepository.saveAll(accounts);
    }

    private Account createAccount(Role role, List<ApprovalStatus> approvalStatuses, int index, String prefix) {
        String firstName = faker.name().firstName();
        String lastName = faker.name().lastName();
        String username = prefix + "_" + (firstName + lastName + index).toLowerCase()
                .replaceAll("\\s+", "")
                .replaceAll("[^a-zA-Z0-9]", "");

        return Account.builder()
                .username(username)
                .email(username + "@example.com")
                .phone("09" + String.format("%8d", random.nextInt(100000000)))
                .password(passwordEncoder.encode("password123"))
                .fullname(firstName + " " + lastName)
                .birthdate(faker.date().birthday(18, 65))
                .gender(random.nextBoolean() ? "Nam" : "N·ªØ")
                .isBanned(random.nextDouble() < 0.05)
                .lastLogin(LocalDateTime.now().minusDays(random.nextInt(30)))
                .accountStatus(Account.AccountStatus.ACTIVE)
                .role(role)
                .approvalStatus(approvalStatuses.get(1)) // APPROVED
                .build();
    }

    private List<Membership> createMemberships(List<Account> accounts) {
        List<Membership> memberships = new ArrayList<>();

        accounts.stream()
                .filter(account -> "customer".equals(account.getRole().getRoleCode()))
                .forEach(customer -> {
                    memberships.add(Membership.builder()
                            .account(customer)
                            .membershipLevel(Membership.MembershipLevel.values()[random.nextInt(Membership.MembershipLevel.values().length)])
                            .totalSpent(BigDecimal.valueOf(random.nextDouble() * 50000000))
                            .totalOrders(random.nextInt(100))
                            .pointsEarned(random.nextInt(10000))
                            .pointsUsed(random.nextInt(5000))
                            .pointsBalance(random.nextInt(5000))
                            .levelUpDate(LocalDateTime.now().minusDays(random.nextInt(365)))
                            .nextLevelRequirement(BigDecimal.valueOf(random.nextDouble() * 10000000))
                            .discountPercentage(BigDecimal.valueOf(random.nextDouble() * 20))
                            .freeShipping(random.nextBoolean())
                            .prioritySupport(random.nextBoolean())
                            .earlyAccess(random.nextBoolean())
                            .build());
                });

        return membershipRepository.saveAll(memberships);
    }

    private List<AgencyInfo> createAgencyInfos(List<Account> accounts, List<ApprovalStatus> approvalStatuses) {
        List<AgencyInfo> agencyInfos = new ArrayList<>();

        accounts.stream()
                .filter(account -> "agency".equals(account.getRole().getRoleCode()))
                .forEach(agency -> {
                    agencyInfos.add(AgencyInfo.builder()
                            .account(agency)
                            .shopName(faker.company().name())
                            .shopAddressDetail(faker.address().fullAddress())
                            .shopEmail(agency.getEmail())
                            .shopPhone(faker.phoneNumber().cellPhone())
                            .taxNumber(String.valueOf(1000000000L + random.nextInt(900000000)))
                            .fullNameApplicant(agency.getFullname())
                            .birthdateApplicant(agency.getBirthdate())
                            .genderApplicant(agency.getGender())
                            .idCardNumber(String.valueOf(100000000000L + random.nextInt(900000000)))
                            .dateOfIssueIdCard(faker.date().past(365 * 10, TimeUnit.DAYS))
                            .placeOfIssueIdCard(faker.address().city())
                            .idCardFrontImageUrl("https://example.com/id-front-" + agency.getAccountId() + ".jpg")
                            .idCardBackImageUrl("https://example.com/id-back-" + agency.getAccountId() + ".jpg")
                            // FIX: Thay ƒë·ªïi th√†nh JSON valid
                            .businessLicenseUrls("[\"https://example.com/business-" + agency.getAccountId() + ".jpg\"]")
                            .professionalCertUrls("[\"https://example.com/cert-" + agency.getAccountId() + ".jpg\"]")
                            .diplomaCertUrls("[\"https://example.com/diploma-" + agency.getAccountId() + ".jpg\"]")
                            .approvalStatus(approvalStatuses.get(1)) // APPROVED
                            .submittedDate(faker.date().past(180, TimeUnit.DAYS))
                            .build());
                });

        return agencyInfoRepository.saveAll(agencyInfos);
    }
    private List<Address> createAddresses(List<Account> accounts) {
        List<Address> addresses = new ArrayList<>();

        for (Account account : accounts) {
            int numAddresses = random.nextInt(3) + 1;
            for (int i = 0; i < numAddresses; i++) {
                addresses.add(Address.builder()
                        .account(account)
                        .fullName(account.getFullname())
                        .phone("09" + String.format("%8d", random.nextInt(100000000)))
                        .addressDetail(faker.address().fullAddress())
                        .isDefault(i == 0)
                        .build());
            }
        }

        return addressRepository.saveAll(addresses);
    }

    private List<Product> createProducts(List<Category> categories, List<AgencyInfo> agencies, List<ApprovalStatus> approvalStatuses) {
        List<Product> products = new ArrayList<>();

        if (agencies.isEmpty()) {
            System.out.println("‚ö†Ô∏è  Kh√¥ng c√≥ agency n√†o ƒë·ªÉ t·∫°o product!");
            return products;
        }

        // T·∫°o s·∫£n ph·∫©m cho m·ªói category
        for (Category category : categories) {
            int numProductsPerCategory = 80 + random.nextInt(40); // 80-120 s·∫£n ph·∫©m m·ªói category

            for (int i = 0; i < numProductsPerCategory; i++) {
                AgencyInfo agency = agencies.get(random.nextInt(agencies.size()));

                // T·∫°o t√™n s·∫£n ph·∫©m ph√π h·ª£p v·ªõi category
                String productName = generateProductName(category.getCategoryName(), i + 1);

                BigDecimal listPrice = BigDecimal.valueOf(200000 + random.nextInt(2800000)); // 200k - 3tr
                BigDecimal salePrice = listPrice.multiply(BigDecimal.valueOf(0.75 + random.nextDouble() * 0.2)); // 75-95% gi√° g·ªëc

                products.add(Product.builder()
                        .category(category)
                        .productName(productName)
                        .productDescription(generateProductDescription(category.getCategoryName()))
                        .listPrice(listPrice)
                        .salePrice(salePrice)
                        .inventoryQuantity(random.nextInt(500) + 50) // 50-550
                        .desiredQuantity(random.nextInt(200) + 100) // 100-300
                        .soldAmount(random.nextInt(100))
                        .agencyInfo(agency)
                        .isSale(random.nextBoolean())
                        .approvalStatus(approvalStatuses.get(1)) // APPROVED
                        .build());
            }
        }

        return productRepository.saveAll(products);
    }

    // Helper method ƒë·ªÉ t·∫°o t√™n s·∫£n ph·∫©m
    private String generateProductName(String categoryName, int index) {
        Map<String, String[]> productNamesByCategory = new HashMap<>();

        productNamesByCategory.put("Th·ª±c ph·∫©m ch·ª©c nƒÉng cho m·∫Øt", new String[]{
                "Vi√™n u·ªëng b·ªï m·∫Øt Lutein", "Vi√™n u·ªëng Blueberry cho m·∫Øt", "Omega 3 b·∫£o v·ªá th·ªã l·ª±c",
                "Vitamin A b·ªï m·∫Øt", "Anthocyanin t·ª´ vi·ªát qu·∫•t", "Astaxanthin ch·ªëng oxy h√≥a m·∫Øt"
        });

        productNamesByCategory.put("Th·ª±c ph·∫©m ch·ª©c nƒÉng cho gan", new String[]{
                "Vi√™n u·ªëng gi·∫£i ƒë·ªôc gan", "Silymarin b·∫£o v·ªá gan", "Ngh·ªá nano curcumin",
                "Artichoke h·ªó tr·ª£ gan", "Vitamin E b·∫£o v·ªá t·∫ø b√†o gan", "Ph·ª©c h·ªá B-Complex"
        });

        productNamesByCategory.put("Th·ª±c ph·∫©m ch·ª©c nƒÉng cho tim m·∫°ch", new String[]{
                "Omega 3 EPA DHA", "CoQ10 b·∫£o v·ªá tim", "Nattokinase h·ªó tr·ª£ tu·∫ßn ho√†n",
                "Vitamin K2 + D3", "Magnesium cho tim", "L-Carnitine tƒÉng c∆∞·ªùng tim m·∫°ch"
        });

        // Th√™m c√°c category kh√°c...
        productNamesByCategory.put("Th·ª±c ph·∫©m ch·ª©c nƒÉng cho x∆∞∆°ng kh·ªõp", new String[]{
                "Glucosamine Chondroitin", "Calcium + Vitamin D3", "MSM h·ªó tr·ª£ kh·ªõp",
                "Collagen Type II", "Boswellia gi·∫£m vi√™m kh·ªõp", "Turmeric Curcumin"
        });

        // L·∫•y danh s√°ch t√™n s·∫£n ph·∫©m cho category
        String[] productNames = productNamesByCategory.getOrDefault(categoryName,
                new String[]{"Th·ª±c ph·∫©m ch·ª©c nƒÉng", "Vi√™n u·ªëng b·ªï sung", "Vitamin t·ªïng h·ª£p"});

        String baseName = productNames[random.nextInt(productNames.length)];
        String[] brands = {"Blackmores", "Nature's Way", "Swisse", "Centrum", "DHC", "Kirkland",
                "Now Foods", "Solgar", "Garden of Life", "Natrol"};
        String brand = brands[random.nextInt(brands.length)];

        return brand + " " + baseName + " " + (index <= 99 ? "" : "Plus");
    }

    // Helper method ƒë·ªÉ t·∫°o m√¥ t·∫£ s·∫£n ph·∫©m
    private String generateProductDescription(String categoryName) {
        Map<String, String[]> descriptionsByCategory = new HashMap<>();

        descriptionsByCategory.put("Th·ª±c ph·∫©m ch·ª©c nƒÉng cho m·∫Øt", new String[]{
                "H·ªó tr·ª£ c·∫£i thi·ªán th·ªã l·ª±c, gi·∫£m m·ªèi m·∫Øt do √°nh s√°ng xanh",
                "B·ªï sung Lutein, Zeaxanthin b·∫£o v·ªá v√µng m·∫°c",
                "Ch·ªëng oxy h√≥a, l√†m ch·∫≠m qu√° tr√¨nh l√£o h√≥a m·∫Øt"
        });

        descriptionsByCategory.put("Th·ª±c ph·∫©m ch·ª©c nƒÉng cho gan", new String[]{
                "H·ªó tr·ª£ gi·∫£i ƒë·ªôc gan, tƒÉng c∆∞·ªùng ch·ª©c nƒÉng gan",
                "B·∫£o v·ªá t·∫ø b√†o gan kh·ªèi t√°c h·∫°i c·ªßa r∆∞·ª£u bia, thu·ªëc l√°",
                "C·∫£i thi·ªán ti√™u h√≥a, gi·∫£m m·ªát m·ªèi do gan y·∫øu"
        });


        String[] descriptions = descriptionsByCategory.getOrDefault(categoryName,
                new String[]{"S·∫£n ph·∫©m th·ª±c ph·∫©m ch·ª©c nƒÉng ch·∫•t l∆∞·ª£ng cao, an to√†n cho s·ª©c kh·ªèe"});

        return descriptions[random.nextInt(descriptions.length)] + ". " + faker.lorem().sentence(8);
    }

    private List<ProductVariant> createProductVariants(List<Product> products) {
        List<ProductVariant> productVariants = new ArrayList<>();

        for (Product product : products) {
            int numVariants = random.nextInt(3) + 1;
            for (int i = 0; i < numVariants; i++) {
                BigDecimal listPrice = product.getListPrice().add(BigDecimal.valueOf(random.nextInt(500000) - 250000));
                BigDecimal salePrice = listPrice.multiply(BigDecimal.valueOf(0.7 + random.nextDouble() * 0.3));

                productVariants.add(ProductVariant.builder()
                        .product(product)
                        .productVariantName(faker.color().name() + " - " + faker.commerce().material())
                        .listPrice(listPrice)
                        .salePrice(salePrice)
                        .inventoryQuantity(random.nextInt(500) + 10)
                        .desiredQuantity(random.nextInt(200) + 20)
                        .build());
            }
        }

        return productVariantRepository.saveAll(productVariants);
    }

    private List<Multimedia> createMultimedia(List<Account> accounts, List<Product> products,
                                              List<ProductVariant> productVariants, List<Category> categories) {
        List<Multimedia> multimedias = new ArrayList<>();

        // Account avatars
        accounts.forEach(account -> {
            multimedias.add(Multimedia.builder()
                    .account(account)
                    .multimediaUrl("https://picsum.photos/400/400?random=" + account.getAccountId())
                    .multimediaType(MultimediaType.IMAGE)
                    .build());
        });

        // Product images
        products.forEach(product -> {
            int numImages = random.nextInt(3) + 1;
            for (int i = 0; i < numImages; i++) {
                multimedias.add(Multimedia.builder()
                        .product(product)
                        .multimediaUrl("https://picsum.photos/500/500?random=" + (product.getProductId() * 10 + i))
                        .multimediaType(MultimediaType.IMAGE)
                        .build());
            }
        });

        // Product variant images (50% c√≥ ·∫£nh ri√™ng)
        productVariants.stream()
                .filter(variant -> random.nextBoolean())
                .forEach(variant -> {
                    multimedias.add(Multimedia.builder()
                            .productVariant(variant)
                            .multimediaUrl("https://picsum.photos/500/500?random=" + (variant.getProductVariantId() * 100))
                            .multimediaType(MultimediaType.IMAGE)
                            .build());
                });

        // Category images
        categories.forEach(category -> {
            multimedias.add(Multimedia.builder()
                    .category(category)
                    .multimediaUrl("https://picsum.photos/300/300?random=" + (category.getCategoryId() * 1000))
                    .multimediaType(MultimediaType.IMAGE)
                    .build());
        });

        return multimediaRepository.saveAll(multimedias);
    }

    private List<Cart> createCarts(List<Account> accounts) {
        List<Cart> carts = new ArrayList<>();

        accounts.forEach(account -> {
            carts.add(Cart.builder()
                    .account(account)
                    .totalItem(0) // S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau khi t·∫°o cart items
                    .build());
        });

        return cartRepository.saveAll(carts);
    }

    private List<CartItem> createCartItems(List<Cart> carts, List<Product> products, List<ProductVariant> productVariants) {
        List<CartItem> cartItems = new ArrayList<>();

        for (Cart cart : carts) {
            int numItems = random.nextInt(5) + 1;
            for (int i = 0; i < numItems; i++) {
                Product product = products.get(random.nextInt(products.size()));
                ProductVariant variant = productVariants.stream()
                        .filter(pv -> pv.getProduct().getProductId().equals(product.getProductId()))
                        .findFirst()
                        .orElse(productVariants.get(random.nextInt(productVariants.size())));

                cartItems.add(CartItem.builder()
                        .cart(cart)
                        .product(product)
                        .productVariant(variant)
                        .quantity(random.nextInt(5) + 1)
                        .build());
            }

            // C·∫≠p nh·∫≠t totalItem cho cart
            cart.setTotalItem(numItems);
            cartRepository.save(cart);
        }

        return cartItemRepository.saveAll(cartItems);
    }

    private List<Coupon> createCoupons(List<Category> categories) {
        List<Coupon> coupons = new ArrayList<>();

        // L·∫•y danh s√°ch agencies ƒë·ªÉ g√°n cho coupon
        List<Account> agencies = accountRepository.findAll().stream()
                .filter(account -> "agency".equals(account.getRole().getRoleCode()))
                .toList();

        for (int i = 0; i < 200; i++) {
            Category category = random.nextBoolean() ?
                    categories.get(random.nextInt(categories.size())) : null;

            Account agency = random.nextBoolean() && !agencies.isEmpty() ?
                    agencies.get(random.nextInt(agencies.size())) : null;

            LocalDateTime startDate = LocalDateTime.now().minusDays(random.nextInt(30));
            LocalDateTime expiryDate = startDate.plusDays(30 + random.nextInt(335));

            coupons.add(Coupon.builder()
                    // TH√äM C√ÅC TR∆Ø·ªúNG B·∫ÆT BU·ªòC
                    .couponCode("COUPON" + String.format("%06d", i + 1))
                    .couponName("Coupon gi·∫£m gi√° " + (i + 1))
                    .category(category)
                    .agency(agency)
                    .discountValue(BigDecimal.valueOf(10000 + random.nextInt(490000)))
                    .discountType(DiscountType.values()[random.nextInt(DiscountType.values().length)])
                    .minPurchaseAmount(BigDecimal.valueOf(100000 + random.nextInt(900000)))
                    .maxDiscountAmount(BigDecimal.valueOf(500000 + random.nextInt(1000000)))
                    .usageLimit(100 + random.nextInt(900))
                    .usedCount(0)
                    .startDate(startDate)
                    .expiryDate(expiryDate)
                    .isActive(random.nextBoolean())
                    .couponType(CouponType.values()[random.nextInt(CouponType.values().length)])
                    .description(faker.lorem().sentence())
                    .termsConditions("√Åp d·ª•ng cho ƒë∆°n h√†ng tr√™n " + (100000 + random.nextInt(900000)) + " VNƒê")
                    // C√ÅC TR∆Ø·ªúNG C≈®
                    .isActivated(random.nextBoolean())
                    .remainingQuantity(10 + random.nextInt(990))
                    .minQuantity(1 + random.nextInt(4))
                    .maxQuantity(10 + random.nextInt(40))
                    .build());
        }

        return couponRepository.saveAll(coupons);
    }
    private List<AccountCoupon> createAccountCoupons(List<Account> accounts, List<Coupon> coupons) {
        List<AccountCoupon> accountCoupons = new ArrayList<>();

        for (int i = 0; i < 1500; i++) {
            Account account = accounts.get(random.nextInt(accounts.size()));
            Coupon coupon = coupons.get(random.nextInt(coupons.size()));

            accountCoupons.add(AccountCoupon.builder()
                    .account(account)
                    .coupon(coupon)
                    .build());
        }

        return accountCouponRepository.saveAll(accountCoupons);
    }

    private List<OrderList> createOrders(List<Account> accounts, List<AgencyInfo> agencies) {
        List<OrderList> orders = new ArrayList<>();
        List<Account> customers = accounts.stream()
                .filter(account -> "customer".equals(account.getRole().getRoleCode()))
                .toList();
//        List<Account> agencies = accounts.stream()
//                .filter(account -> "agency".equals(account.getRole().getRoleCode()))
//                .toList();

        if (customers.isEmpty() || agencies.isEmpty()) {
            System.out.println("‚ö†Ô∏è  Kh√¥ng c√≥ customer ho·∫∑c agency ƒë·ªÉ t·∫°o orders!");
            return orders;
        }

        for (int i = 0; i < 1500; i++) {
            Account customer = customers.get(random.nextInt(customers.size()));
            AgencyInfo agency = agencies.get(random.nextInt(agencies.size()));

            orders.add(OrderList.builder()
                    .account(customer)
                    .agency(agency)
                    .orderDate(LocalDateTime.now().minusDays(random.nextInt(365)))
                    .totalPrice(BigDecimal.ZERO) // S·∫Ω ƒë∆∞·ª£c t√≠nh l·∫°i trong createOrderDetails
                    .orderStatus(OrderStatus.values()[random.nextInt(OrderStatus.values().length)])
                    .addressDetail(faker.address().fullAddress())
                    .build());
        }

        return orderRepository.saveAll(orders);
    }
    private List<OrderDetail> createOrderDetails(List<OrderList> orders, List<Product> products, List<ProductVariant> productVariants) {
        List<OrderDetail> orderDetails = new ArrayList<>();

        for (OrderList order : orders) {
            int numItems = random.nextInt(3) + 1; // 1-3 items per order
            BigDecimal orderTotal = BigDecimal.ZERO;

            for (int i = 0; i < numItems; i++) {
                Product product = products.get(random.nextInt(products.size()));
                ProductVariant variant = productVariants.stream()
                        .filter(pv -> pv.getProduct().getProductId().equals(product.getProductId()))
                        .findFirst()
                        .orElse(productVariants.get(random.nextInt(productVariants.size())));

                int quantity = random.nextInt(3) + 1; // 1-3 quantity per item
                BigDecimal price = variant.getSalePrice();
                BigDecimal subtotal = price.multiply(BigDecimal.valueOf(quantity));
                orderTotal = orderTotal.add(subtotal);

                orderDetails.add(OrderDetail.builder()
                        .orderList(order)
                        .product(product)
                        .productVariant(variant)
                        .quantity(quantity)
                        .price(price)
                        .subtotal(subtotal)
                        .build());
            }

            // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn cho order - ƒë·∫£m b·∫£o kh√¥ng qu√° l·ªõn
            if (orderTotal.compareTo(BigDecimal.valueOf(10000000)) > 0) { // N·∫øu > 10 tri·ªáu
                orderTotal = BigDecimal.valueOf(1000000 + random.nextInt(2000000)); // Gi·ªõi h·∫°n 1-3 tri·ªáu
            }

            order.setTotalPrice(orderTotal);
            orderRepository.save(order);
        }

        return orderDetailRepository.saveAll(orderDetails);
    }
    private List<CouponOrderList> createCouponOrderLists(List<Coupon> coupons, List<OrderList> orders) {
        List<CouponOrderList> couponOrderLists = new ArrayList<>();

        for (int i = 0; i < 800; i++) {
            Coupon coupon = coupons.get(random.nextInt(coupons.size()));
            OrderList order = orders.get(random.nextInt(orders.size()));

            couponOrderLists.add(CouponOrderList.builder()
                    .coupon(coupon)
                    .orderList(order)
                    .build());
        }

        return couponOrderListRepository.saveAll(couponOrderLists);
    }

    private List<Feedback> createFeedbacks(List<Account> accounts, List<Product> products) {
        List<Feedback> feedbacks = new ArrayList<>();
        List<Account> customers = accounts.stream()
                .filter(account -> "customer".equals(account.getRole().getRoleCode()))
                .toList();

        if (customers.isEmpty() || products.isEmpty()) {
            System.out.println("‚ö†Ô∏è  Kh√¥ng c√≥ customer ho·∫∑c product ƒë·ªÉ t·∫°o feedback!");
            return feedbacks;
        }

        for (int i = 0; i < 3000; i++) {
            Account customer = customers.get(random.nextInt(customers.size()));
            Product product = products.get(random.nextInt(products.size()));

            feedbacks.add(Feedback.builder()
                    .account(customer)
                    .product(product)
                    .rating(Rating.values()[random.nextInt(Rating.values().length)])
                    .comment(faker.lorem().paragraph(3))
                    .build());
        }

        return feedbackRepository.saveAll(feedbacks);
    }

    // Method ƒë·ªÉ t·∫°o d·ªØ li·ªáu theo batch ƒë·ªÉ tr√°nh l·ªói memory
    @Transactional
    public void generateBigSampleData() {
        System.out.println("=== T·∫†O D·ªÆ LI·ªÜU M·∫™U L·ªöNH·ªåN (10K+ RECORDS) ===");

        try {
            clearExistingData();

            // T·∫°o d·ªØ li·ªáu c∆° b·∫£n tr∆∞·ªõc
            List<Role> roles = createRoles();
            List<ApprovalStatus> approvalStatuses = createApprovalStatuses();
            List<ParentCategory> parentCategories = createParentCategories();
            List<Category> categories = createCategoriesBig(parentCategories, 200); // 200 categories

            // T·∫°o accounts theo batch
            List<Account> allAccounts = new ArrayList<>();
            for (int batch = 0; batch < 10; batch++) {
                List<Account> batchAccounts = createAccountsBatch(roles, approvalStatuses, batch, 100);
                allAccounts.addAll(batchAccounts);
                System.out.println("‚úì Batch " + (batch + 1) + ": ƒê√£ t·∫°o " + batchAccounts.size() + " accounts");
            }

            // T·∫°o membership cho customers
            List<Membership> memberships = createMemberships(allAccounts);
            System.out.println("‚úì ƒê√£ t·∫°o " + memberships.size() + " memberships");

            // T·∫°o agency info cho agencies
            List<AgencyInfo> agencyInfos = createAgencyInfos(allAccounts, approvalStatuses);
            System.out.println("‚úì ƒê√£ t·∫°o " + agencyInfos.size() + " agency infos");

            // T·∫°o addresses
            List<Address> addresses = createAddressesBig(allAccounts);
            System.out.println("‚úì ƒê√£ t·∫°o " + addresses.size() + " addresses");

            // T·∫°o products theo batch
            List<Product> allProducts = new ArrayList<>();
            List<Account> agencies = allAccounts.stream()
                    .filter(account -> "agency".equals(account.getRole().getRoleCode()))
                    .toList();

            for (int batch = 0; batch < 20; batch++) {
                List<Product> batchProducts = createProductsBatch(categories, agencies, approvalStatuses, batch, 100);
                allProducts.addAll(batchProducts);
                System.out.println("‚úì Batch " + (batch + 1) + ": ƒê√£ t·∫°o " + batchProducts.size() + " products");
            }

            // T·∫°o product variants
            List<ProductVariant> productVariants = createProductVariantsBig(allProducts);
            System.out.println("‚úì ƒê√£ t·∫°o " + productVariants.size() + " product variants");

            // T·∫°o multimedia
            List<Multimedia> multimedias = createMultimediaBig(allAccounts, allProducts, productVariants, categories);
            System.out.println("‚úì ƒê√£ t·∫°o " + multimedias.size() + " multimedia");

            // T·∫°o carts
            List<Cart> carts = createCarts(allAccounts);
            System.out.println("‚úì ƒê√£ t·∫°o " + carts.size() + " carts");

            // T·∫°o cart items
            List<CartItem> cartItems = createCartItemsBig(carts, allProducts, productVariants);
            System.out.println("‚úì ƒê√£ t·∫°o " + cartItems.size() + " cart items");

            // T·∫°o coupons
            List<Coupon> coupons = createCouponsBig(categories);
            System.out.println("‚úì ƒê√£ t·∫°o " + coupons.size() + " coupons");

            // T·∫°o account coupons
            List<AccountCoupon> accountCoupons = createAccountCouponsBig(allAccounts, coupons);
            System.out.println("‚úì ƒê√£ t·∫°o " + accountCoupons.size() + " account coupons");

            // T·∫°o orders
            List<OrderList> orders = createOrdersBig(allAccounts, agencyInfos);
            System.out.println("‚úì ƒê√£ t·∫°o " + orders.size() + " orders");

            // T·∫°o order details
            List<OrderDetail> orderDetails = createOrderDetailsBig(orders, allProducts, productVariants);
            System.out.println("‚úì ƒê√£ t·∫°o " + orderDetails.size() + " order details");

            // T·∫°o coupon order lists
            List<CouponOrderList> couponOrderLists = createCouponOrderListsBig(coupons, orders);
            System.out.println("‚úì ƒê√£ t·∫°o " + couponOrderLists.size() + " coupon order lists");

            // T·∫°o feedbacks
            List<Feedback> feedbacks = createFeedbacksBig(allAccounts, allProducts);
            System.out.println("‚úì ƒê√£ t·∫°o " + feedbacks.size() + " feedbacks");

            // T√≠nh t·ªïng cu·ªëi c√πng
            long total = roleRepository.count() + approvalStatusRepository.count() +
                    parentCategoryRepository.count() + categoryRepository.count() +
                    accountRepository.count() + membershipRepository.count() +
                    agencyInfoRepository.count() + addressRepository.count() +
                    productRepository.count() + productVariantRepository.count() +
                    multimediaRepository.count() + cartRepository.count() +
                    cartItemRepository.count() + couponRepository.count() +
                    accountCouponRepository.count() + orderRepository.count() +
                    orderDetailRepository.count() + couponOrderListRepository.count() +
                    feedbackRepository.count();

            System.out.println("=== HO√ÄN TH√ÄNH T·∫†O D·ªÆ LI·ªÜU M·∫™U L·ªöN ===");
            System.out.println("T·ªîNG S·ªê RECORDS: " + total);

        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI KHI T·∫†O D·ªÆ LI·ªÜU L·ªöN: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("L·ªói t·∫°o d·ªØ li·ªáu m·∫´u l·ªõn", e);
        }
    }

    // Helper methods cho vi·ªác t·∫°o d·ªØ li·ªáu l·ªõn
    private List<Category> createCategoriesBig(List<ParentCategory> parentCategories, int count) {
        // S·ª≠ d·ª•ng logic t∆∞∆°ng t·ª± nh∆∞ createCategories() ·ªü tr√™n
        return createCategories(parentCategories); // T√°i s·ª≠ d·ª•ng logic
    }

    private List<Account> createAccountsBatch(List<Role> roles, List<ApprovalStatus> approvalStatuses, int batchIndex, int batchSize) {
        List<Account> accounts = new ArrayList<>();

        Role customerRole = roles.stream().filter(r -> r.getRoleCode().equals("customer")).findFirst().orElse(roles.get(1));
        Role agencyRole = roles.stream().filter(r -> r.getRoleCode().equals("agency")).findFirst().orElse(roles.get(2));

        for (int i = 0; i < batchSize; i++) {
            int globalIndex = batchIndex * batchSize + i;
            Role role = (globalIndex % 4 == 0) ? agencyRole : customerRole; // 25% agency, 75% customer
            accounts.add(createAccount(role, approvalStatuses, globalIndex, role.getRoleCode().toLowerCase()));
        }

        return accountRepository.saveAll(accounts);
    }

    private List<Address> createAddressesBig(List<Account> accounts) {
        List<Address> addresses = new ArrayList<>();

        for (Account account : accounts) {
            int numAddresses = random.nextInt(3) + 1;
            for (int i = 0; i < numAddresses; i++) {
                addresses.add(Address.builder()
                        .account(account)
                        .fullName(account.getFullname())
                        .phone("09" + String.format("%8d", random.nextInt(100000000)))
                        .addressDetail(faker.address().fullAddress())
                        .isDefault(i == 0)
                        .build());
            }
        }

        // Save theo batch ƒë·ªÉ tr√°nh memory issue
        List<Address> savedAddresses = new ArrayList<>();
        for (int i = 0; i < addresses.size(); i += 500) {
            int end = Math.min(i + 500, addresses.size());
            savedAddresses.addAll(addressRepository.saveAll(addresses.subList(i, end)));
        }

        return savedAddresses;
    }

    private List<Product> createProductsBatch(List<Category> categories, List<Account> agencies,
                                              List<ApprovalStatus> approvalStatuses, int batchIndex, int batchSize) {
        List<Product> products = new ArrayList<>();

        if (agencies.isEmpty()) {
            return products;
        }

        // L·∫•y danh s√°ch AgencyInfo ƒë√£ t·∫°o (ch·ªâ l·∫•y 1 l·∫ßn cho c·∫£ batch)
        List<AgencyInfo> agencyInfos = agencyInfoRepository.findAll();
        if (agencyInfos.isEmpty()) {
            System.out.println("‚ö†Ô∏è  Kh√¥ng c√≥ agency info n√†o ƒë·ªÉ t·∫°o product batch!");
            return products;
        }

        // T·∫°o Map ƒë·ªÉ tra c·ª©u nhanh AgencyInfo theo Account ID
        Map<Long, AgencyInfo> agencyInfoMap = agencyInfos.stream()
                .collect(Collectors.toMap(
                        agencyInfo -> agencyInfo.getAccount().getAccountId(),
                        agencyInfo -> agencyInfo
                ));

        for (int i = 0; i < batchSize; i++) {
            int globalIndex = batchIndex * batchSize + i;
            Category category = categories.get(random.nextInt(categories.size()));
            Account selectedAgencyAccount = agencies.get(random.nextInt(agencies.size()));

            // T√¨m AgencyInfo t∆∞∆°ng ·ª©ng v·ªõi Account ƒë√£ ch·ªçn
            AgencyInfo selectedAgencyInfo = agencyInfoMap.get(selectedAgencyAccount.getAccountId());

            if (selectedAgencyInfo == null) {
                System.out.println("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y AgencyInfo cho Account ID: " + selectedAgencyAccount.getAccountId());
                continue; // B·ªè qua product n√†y
            }

            BigDecimal listPrice = BigDecimal.valueOf(50000 + random.nextInt(9950000));
            BigDecimal salePrice = listPrice.multiply(BigDecimal.valueOf(0.7 + random.nextDouble() * 0.3));

            products.add(Product.builder()
                    .category(category)
                    .productName(faker.commerce().productName() + " " + globalIndex)
                    .productDescription(faker.lorem().paragraph(5))
                    .listPrice(listPrice)
                    .salePrice(salePrice)
                    .inventoryQuantity(random.nextInt(1000) + 10)
                    .desiredQuantity(random.nextInt(500) + 50)
                    .soldAmount(random.nextInt(200))
                    .agencyInfo(selectedAgencyInfo)  // ‚úÖ TH√äM D√íNG N√ÄY
                    .isSale(random.nextBoolean())
                    .approvalStatus(approvalStatuses.get(1))
                    .build());
        }

        return productRepository.saveAll(products);
    }

    private List<ProductVariant> createProductVariantsBig(List<Product> products) {
        List<ProductVariant> productVariants = new ArrayList<>();

        for (Product product : products) {
            int numVariants = random.nextInt(3) + 1;
            for (int i = 0; i < numVariants; i++) {
                BigDecimal listPrice = product.getListPrice().add(BigDecimal.valueOf(random.nextInt(500000) - 250000));
                BigDecimal salePrice = listPrice.multiply(BigDecimal.valueOf(0.7 + random.nextDouble() * 0.3));

                productVariants.add(ProductVariant.builder()
                        .product(product)
                        .productVariantName(faker.color().name() + " - " + faker.commerce().material())
                        .listPrice(listPrice)
                        .salePrice(salePrice)
                        .inventoryQuantity(random.nextInt(500) + 10)
                        .desiredQuantity(random.nextInt(200) + 20)
                        .build());
            }
        }

        // Save theo batch
        List<ProductVariant> savedVariants = new ArrayList<>();
        for (int i = 0; i < productVariants.size(); i += 1000) {
            int end = Math.min(i + 1000, productVariants.size());
            savedVariants.addAll(productVariantRepository.saveAll(productVariants.subList(i, end)));
        }

        return savedVariants;
    }

    private List<Multimedia> createMultimediaBig(List<Account> accounts, List<Product> products,
                                                 List<ProductVariant> productVariants, List<Category> categories) {
        List<Multimedia> multimedias = new ArrayList<>();

        // Account avatars
        accounts.forEach(account -> {
            multimedias.add(Multimedia.builder()
                    .account(account)
                    .multimediaUrl("https://picsum.photos/400/400?random=" + account.getAccountId())
                    .multimediaType(MultimediaType.IMAGE)
                    .build());
        });

        // Product images (2-3 per product)
        products.forEach(product -> {
            int numImages = random.nextInt(2) + 2;
            for (int i = 0; i < numImages; i++) {
                multimedias.add(Multimedia.builder()
                        .product(product)
                        .multimediaUrl("https://picsum.photos/500/500?random=" + (product.getProductId() * 10 + i))
                        .multimediaType(MultimediaType.IMAGE)
                        .build());
            }
        });

        // Save theo batch
        List<Multimedia> savedMultimedia = new ArrayList<>();
        for (int i = 0; i < multimedias.size(); i += 1000) {
            int end = Math.min(i + 1000, multimedias.size());
            savedMultimedia.addAll(multimediaRepository.saveAll(multimedias.subList(i, end)));
        }

        return savedMultimedia;
    }

    private List<CartItem> createCartItemsBig(List<Cart> carts, List<Product> products, List<ProductVariant> productVariants) {
        List<CartItem> cartItems = new ArrayList<>();

        for (Cart cart : carts) {
            int numItems = random.nextInt(5) + 1;
            for (int i = 0; i < numItems; i++) {
                Product product = products.get(random.nextInt(products.size()));
                ProductVariant variant = productVariants.stream()
                        .filter(pv -> pv.getProduct().getProductId().equals(product.getProductId()))
                        .findFirst()
                        .orElse(productVariants.get(random.nextInt(productVariants.size())));

                cartItems.add(CartItem.builder()
                        .cart(cart)
                        .product(product)
                        .productVariant(variant)
                        .quantity(random.nextInt(5) + 1)
                        .build());
            }

            cart.setTotalItem(numItems);
            cartRepository.save(cart);
        }

        return cartItemRepository.saveAll(cartItems);
    }

    private List<Coupon> createCouponsBig(List<Category> categories) {
        List<Coupon> coupons = new ArrayList<>();

        for (int i = 0; i < 500; i++) {
            Category category = random.nextBoolean() ? categories.get(random.nextInt(categories.size())) : null;

            coupons.add(Coupon.builder()
                    .category(category)
                    .discountValue(BigDecimal.valueOf(10000 + random.nextInt(490000)))
                    .discountType(DiscountType.values()[random.nextInt(DiscountType.values().length)])
                    .expiryDate(LocalDateTime.now().plusDays(30 + random.nextInt(335)))
                    .isActivated(random.nextBoolean())
                    .remainingQuantity(10 + random.nextInt(990))
                    .minPurchaseAmount(BigDecimal.valueOf(100000 + random.nextInt(900000)))
                    .minQuantity(1 + random.nextInt(4))
                    .maxQuantity(10 + random.nextInt(40))
                    .description(faker.lorem().sentence())
                    .couponType(CouponType.values()[random.nextInt(CouponType.values().length)])
                    .build());
        }

        return couponRepository.saveAll(coupons);
    }

    private List<AccountCoupon> createAccountCouponsBig(List<Account> accounts, List<Coupon> coupons) {
        List<AccountCoupon> accountCoupons = new ArrayList<>();

        for (int i = 0; i < 2000; i++) {
            Account account = accounts.get(random.nextInt(accounts.size()));
            Coupon coupon = coupons.get(random.nextInt(coupons.size()));

            accountCoupons.add(AccountCoupon.builder()
                    .account(account)
                    .coupon(coupon)
                    .build());
        }

        return accountCouponRepository.saveAll(accountCoupons);
    }

    private List<OrderList> createOrdersBig(List<Account> accounts, List<AgencyInfo> agencies) {
        List<OrderList> orders = new ArrayList<>();
        List<Account> customers = accounts.stream()
                .filter(account -> "customer".equals(account.getRole().getRoleCode()))
                .toList();
//        List<Account> agencies = accounts.stream()
//                .filter(account -> "agency".equals(account.getRole().getRoleCode()))
//                .toList();

        if (customers.isEmpty() || agencies.isEmpty()) {
            return orders;
        }

        for (int i = 0; i < 2000; i++) {
            Account customer = customers.get(random.nextInt(customers.size()));
            AgencyInfo agency = agencies.get(random.nextInt(agencies.size()));

            orders.add(OrderList.builder()
                    .account(customer)
                    .agency(agency)
                    .orderDate(LocalDateTime.now().minusDays(random.nextInt(365)))
                    .totalPrice(BigDecimal.ZERO) // S·∫Ω ƒë∆∞·ª£c t√≠nh l·∫°i trong createOrderDetails
                    .orderStatus(OrderStatus.values()[random.nextInt(OrderStatus.values().length)])
                    .addressDetail(faker.address().fullAddress())
                    .build());
        }

        return orderRepository.saveAll(orders);
    }

    private List<OrderDetail> createOrderDetailsBig(List<OrderList> orders, List<Product> products, List<ProductVariant> productVariants) {
        List<OrderDetail> orderDetails = new ArrayList<>();

        for (OrderList order : orders) {
            int numItems = random.nextInt(3) + 1; // 1-3 items
            BigDecimal orderTotal = BigDecimal.ZERO;

            for (int i = 0; i < numItems; i++) {
                Product product = products.get(random.nextInt(products.size()));
                ProductVariant variant = productVariants.stream()
                        .filter(pv -> pv.getProduct().getProductId().equals(product.getProductId()))
                        .findFirst()
                        .orElse(productVariants.get(random.nextInt(productVariants.size())));

                int quantity = random.nextInt(2) + 1; // 1-2 quantity ƒë·ªÉ gi·∫£m t·ªïng gi√°
                BigDecimal price = variant.getSalePrice();
                BigDecimal subtotal = price.multiply(BigDecimal.valueOf(quantity));
                orderTotal = orderTotal.add(subtotal);

                orderDetails.add(OrderDetail.builder()
                        .orderList(order)
                        .product(product)
                        .productVariant(variant)
                        .quantity(quantity)
                        .price(price)
                        .subtotal(subtotal)
                        .build());
            }

            // Gi·ªõi h·∫°n t·ªïng ti·ªÅn order t·ªëi ƒëa 5 tri·ªáu
            if (orderTotal.compareTo(BigDecimal.valueOf(5000000)) > 0) {
                orderTotal = BigDecimal.valueOf(500000 + random.nextInt(1500000)); // 0.5-2 tri·ªáu
            }

            order.setTotalPrice(orderTotal);
            orderRepository.save(order);
        }

        // Save theo batch
        List<OrderDetail> savedOrderDetails = new ArrayList<>();
        for (int i = 0; i < orderDetails.size(); i += 1000) {
            int end = Math.min(i + 1000, orderDetails.size());
            savedOrderDetails.addAll(orderDetailRepository.saveAll(orderDetails.subList(i, end)));
        }

        return savedOrderDetails;
    }
    private List<CouponOrderList> createCouponOrderListsBig(List<Coupon> coupons, List<OrderList> orders) {
        List<CouponOrderList> couponOrderLists = new ArrayList<>();

        for (int i = 0; i < 1000; i++) {
            Coupon coupon = coupons.get(random.nextInt(coupons.size()));
            OrderList order = orders.get(random.nextInt(orders.size()));

            couponOrderLists.add(CouponOrderList.builder()
                    .coupon(coupon)
                    .orderList(order)
                    .build());
        }

        return couponOrderListRepository.saveAll(couponOrderLists);
    }

    private List<Feedback> createFeedbacksBig(List<Account> accounts, List<Product> products) {
        List<Feedback> feedbacks = new ArrayList<>();
        List<Account> customers = accounts.stream()
                .filter(account -> "customer".equals(account.getRole().getRoleCode()))
                .toList();

        if (customers.isEmpty() || products.isEmpty()) {
            return feedbacks;
        }

        for (int i = 0; i < 3000; i++) {
            Account customer = customers.get(random.nextInt(customers.size()));
            Product product = products.get(random.nextInt(products.size()));

            feedbacks.add(Feedback.builder()
                    .account(customer)
                    .product(product)
                    .rating(Rating.values()[random.nextInt(Rating.values().length)])
                    .comment(faker.lorem().paragraph(3))
                    .build());
        }

        // Save theo batch
        List<Feedback> savedFeedbacks = new ArrayList<>();
        for (int i = 0; i < feedbacks.size(); i += 1000) {
            int end = Math.min(i + 1000, feedbacks.size());
            savedFeedbacks.addAll(feedbackRepository.saveAll(feedbacks.subList(i, end)));
        }

        return savedFeedbacks;
    }
}